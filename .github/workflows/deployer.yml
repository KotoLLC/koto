on: 
  workflow_dispatch:
#    inputs:
#      destination:
#        description: 's (staging) p (prod) b (both)'     
#        default: 's'
#        required: true
      branch:
        description: 'branch'     
        default: 'master'
        required: true
jobs:
  build-and-publish:
    name: Build and Publish images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.2
        name: Check out code
        with:
          ref: '${{ github.event.inputs.branch}}'

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build and Publish Frontend
        with:
          image: koto/frontend
          tags: ${{ github.run_number }}, latest
          registry: ghcr.io
          githubOrg: kotollc
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }} 
          directory: ./frontend

          dockerfile: ./frontend/Dockerfile.production

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build and Publish Userhub
        with:
          image: koto/userhub
          tags: ${{ github.run_number }}, latest
          registry: ghcr.io
          githubOrg: kotollc
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
          directory: ./backend
          dockerfile: ./backend/userhub/Dockerfile

      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build and Publish Messagehub
        with:
          image: koto/messagehub
          tags: ${{ github.run_number }}, latest
          registry: ghcr.io
          githubOrg: kotollc
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }} 
          directory: ./backend
          dockerfile: ./backend/messagehub/Dockerfile


  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-publish
    env:
      DO_CLUSTER_ID: "4626b044-a746-4205-9ab7-16c863182602"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: '${{ github.event.inputs.branch}}'
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ env.DO_CLUSTER_ID }}

      - name: Update deployment file (staging)
        run: |
#          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/staging/backend-staging/user-hub.yaml
#          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/staging/frontend-staging/frontend.yaml
#          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/staging/backend-staging/message-hub.yaml
          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/production/backend/user-hub.yaml
          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/production/frontend/frontend.yaml
          sed -i 's|<TAG>|'${{ github.run_number }}'|' $GITHUB_WORKSPACE/.k8s/production/backend/message-hub.yaml

      - name: (re) deploy the cert-manager and ingress controller
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update  
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.3.0  --set installCRDs=true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true


      - name: (re) create secrets
        run: |
          kubectl delete secret db-message-hub-password --ignore-not-found -n backend
          kubectl delete secret db-user-hub-password --ignore-not-found -n backend
          kubectl delete secret message-hub-secrets --ignore-not-found -n backend
          kubectl delete secret user-hub-s3 --ignore-not-found -n backend
          kubectl delete secret user-hub-smtp --ignore-not-found -n backend
          kubectl delete secret pgadmin --ignore-not-found -n backend
          kubectl delete secret user-hub-firebase --ignore-not-found -n backend
          kubectl delete secret user-hub-key --ignore-not-found -n backend
          kubectl delete secret do-token --ignore-not-found -n backend

#          kubectl delete secret db-message-hub-password --ignore-not-found -n backend-staging
#          kubectl delete secret db-user-hub-password --ignore-not-found -n backend-staging
#          kubectl delete secret message-hub-secrets --ignore-not-found -n backend-staging
#          kubectl delete secret user-hub-s3 --ignore-not-found -n backend-staging
#          kubectl delete secret user-hub-smtp --ignore-not-found -n backend-staging
#          kubectl delete secret pgadmin --ignore-not-found -n backend-staging
#          kubectl delete secret user-hub-firebase --ignore-not-found -n backend-staging
#          kubectl delete secret user-hub-key --ignore-not-found -n backend-staging
#          kubectl delete secret do-token --ignore-not-found -n backend-staging

          kubectl create secret generic db-message-hub-password --from-literal=password="${{ secrets.K8S_COMMON_SECRET }}" -n backend
          kubectl create secret generic db-user-hub-password --from-literal=password="${{ secrets.K8S_COMMON_SECRET }}" -n backend
          kubectl create secret generic message-hub-secrets --from-literal=s3_key="${{ secrets.DIGITALOCEAN_S3_KEY }}" --from-literal=s3_secret="${{ secrets.DIGITALOCEAN_S3_SECRET }}" -n backend
          kubectl create secret generic user-hub-s3 --from-literal=s3_key="${{ secrets.DIGITALOCEAN_S3_KEY }}" --from-literal=s3_secret="${{ secrets.DIGITALOCEAN_S3_SECRET }}" -n backend
          kubectl create secret generic user-hub-smtp --from-literal=smtp_user="postmaster@mg.peacenik.app" --from-literal=smtp_password="${{ secrets.MAILGUN_PASSWORD }}" -n backend
          kubectl create secret generic pgadmin --from-literal=pgadmin-password="${{ secrets.PGADMIN_PASSWORD }}" -n backend
          kubectl create secret generic user-hub-firebase --from-literal=firebase_token="${{ secrets.FIREBASE_TOKEN }}" -n backend
          kubectl create secret generic user-hub-key --from-literal=password="${{ secrets.USERHUB_SECRET }}" -n backend
          kubectl create secret generic do-token --from-literal=token="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" -n backend

#          kubectl create secret generic db-message-hub-password --from-literal=password="${{ secrets.K8S_COMMON_SECRET }}" -n backend-staging
#          kubectl create secret generic db-user-hub-password --from-literal=password="${{ secrets.K8S_COMMON_SECRET }}" -n backend-staging
#          kubectl create secret generic message-hub-secrets --from-literal=s3_key="${{ secrets.DIGITALOCEAN_S3_KEY }}" --from-literal=s3_secret="${{ secrets.DIGITALOCEAN_S3_SECRET }}" -n backend-staging
#          kubectl create secret generic user-hub-s3 --from-literal=s3_key="${{ secrets.DIGITALOCEAN_S3_KEY }}" --from-literal=s3_secret="${{ secrets.DIGITALOCEAN_S3_SECRET }}" -n backend-staging
#          kubectl create secret generic user-hub-smtp --from-literal=smtp_user="postmaster@mg.peacenik.app" --from-literal=smtp_password="${{ secrets.MAILGUN_PASSWORD }}" -n backend-staging
#          kubectl create secret generic pgadmin --from-literal=pgadmin-password="${{ secrets.PGADMIN_PASSWORD_STAGING }}" -n backend-staging
#          kubectl create secret generic user-hub-firebase --from-literal=firebase_token="${{ secrets.FIREBASE_TOKEN }}" -n backend-staging
#          kubectl create secret generic user-hub-key --from-literal=password="${{ secrets.USERHUB_SECRET }}" -n backend-staging
#          kubectl create secret generic do-token --from-literal=token="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" -n backend-staging

#      - name: Deploy Frontend and User-hub to DigitalOcean Kubernetes (staging)
#        if: ${{ github.event.inputs.destination == 's' }} || ${{ github.event.inputs.destination == 'b' }}
#        run: |
#          kubectl apply --recursive -f $GITHUB_WORKSPACE/.k8s/staging/  --force
      - name: Deploy Frontend and User-hub to DigitalOcean Kubernetes (production)
#        if: ${{ github.event.inputs.destination == 'p' }} || ${{ github.event.inputs.destination == 'b' }}
        run: |
          kubectl apply --recursive -f $GITHUB_WORKSPACE/.k8s/production/  --force
      - name: Slack notify
        uses: edge/simple-slack-notify@master
        with:
          channel: '#engineering'
          text: 'Branch ${{ github.event.inputs.branch }} pushed'
          color: 'good'
