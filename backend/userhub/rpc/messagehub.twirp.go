// Code generated by protoc-gen-twirp v7.2.0, DO NOT EDIT.
// source: messagehub.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// ===========================
// MessageHubService Interface
// ===========================

type MessageHubService interface {
	Create(context.Context, *MessageHubCreateRequest) (*Empty, error)

	Register(context.Context, *MessageHubRegisterRequest) (*Empty, error)

	Hubs(context.Context, *Empty) (*MessageHubHubsResponse, error)

	Verify(context.Context, *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error)

	Approve(context.Context, *MessageHubApproveRequest) (*MessageHubApproveResponse, error)

	Remove(context.Context, *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error)

	SetPostLimit(context.Context, *MessageHubSetPostLimitRequest) (*Empty, error)

	SetAllowFriendGroups(context.Context, *MessageHubSetAllowFriendGroupsRequest) (*Empty, error)

	SetExpirationDays(context.Context, *MessageHubSetExpirationDaysRequest) (*Empty, error)

	ReportMessage(context.Context, *MessageHubReportMessageRequest) (*Empty, error)

	BlockUser(context.Context, *MessageHubBlockUserRequest) (*Empty, error)
}

// =================================
// MessageHubService Protobuf Client
// =================================

type messageHubServiceProtobufClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMessageHubServiceProtobufClient creates a Protobuf client that implements the MessageHubService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMessageHubServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) MessageHubService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "rpc", "MessageHubService")
	urls := [11]string{
		serviceURL + "Create",
		serviceURL + "Register",
		serviceURL + "Hubs",
		serviceURL + "Verify",
		serviceURL + "Approve",
		serviceURL + "Remove",
		serviceURL + "SetPostLimit",
		serviceURL + "SetAllowFriendGroups",
		serviceURL + "SetExpirationDays",
		serviceURL + "ReportMessage",
		serviceURL + "BlockUser",
	}

	return &messageHubServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *messageHubServiceProtobufClient) Create(ctx context.Context, in *MessageHubCreateRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	caller := c.callCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubCreateRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubCreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubCreateRequest) when calling interceptor")
					}
					return c.callCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callCreate(ctx context.Context, in *MessageHubCreateRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) Register(ctx context.Context, in *MessageHubRegisterRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubRegisterRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRegisterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRegisterRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callRegister(ctx context.Context, in *MessageHubRegisterRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) Hubs(ctx context.Context, in *Empty) (*MessageHubHubsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Hubs")
	caller := c.callHubs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *Empty) (*MessageHubHubsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return c.callHubs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubHubsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubHubsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callHubs(ctx context.Context, in *Empty) (*MessageHubHubsResponse, error) {
	out := new(MessageHubHubsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) Verify(ctx context.Context, in *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Verify")
	caller := c.callVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubVerifyRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubVerifyRequest) when calling interceptor")
					}
					return c.callVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubVerifyResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubVerifyResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callVerify(ctx context.Context, in *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
	out := new(MessageHubVerifyResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) Approve(ctx context.Context, in *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Approve")
	caller := c.callApprove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubApproveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubApproveRequest) when calling interceptor")
					}
					return c.callApprove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubApproveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubApproveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callApprove(ctx context.Context, in *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
	out := new(MessageHubApproveResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) Remove(ctx context.Context, in *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	caller := c.callRemove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRemoveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRemoveRequest) when calling interceptor")
					}
					return c.callRemove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubRemoveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubRemoveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callRemove(ctx context.Context, in *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
	out := new(MessageHubRemoveResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) SetPostLimit(ctx context.Context, in *MessageHubSetPostLimitRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetPostLimit")
	caller := c.callSetPostLimit
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetPostLimitRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetPostLimitRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetPostLimitRequest) when calling interceptor")
					}
					return c.callSetPostLimit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callSetPostLimit(ctx context.Context, in *MessageHubSetPostLimitRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) SetAllowFriendGroups(ctx context.Context, in *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetAllowFriendGroups")
	caller := c.callSetAllowFriendGroups
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetAllowFriendGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetAllowFriendGroupsRequest) when calling interceptor")
					}
					return c.callSetAllowFriendGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callSetAllowFriendGroups(ctx context.Context, in *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) SetExpirationDays(ctx context.Context, in *MessageHubSetExpirationDaysRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetExpirationDays")
	caller := c.callSetExpirationDays
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetExpirationDaysRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetExpirationDaysRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetExpirationDaysRequest) when calling interceptor")
					}
					return c.callSetExpirationDays(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callSetExpirationDays(ctx context.Context, in *MessageHubSetExpirationDaysRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) ReportMessage(ctx context.Context, in *MessageHubReportMessageRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	caller := c.callReportMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubReportMessageRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubReportMessageRequest) when calling interceptor")
					}
					return c.callReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callReportMessage(ctx context.Context, in *MessageHubReportMessageRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceProtobufClient) BlockUser(ctx context.Context, in *MessageHubBlockUserRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "BlockUser")
	caller := c.callBlockUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubBlockUserRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubBlockUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubBlockUserRequest) when calling interceptor")
					}
					return c.callBlockUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceProtobufClient) callBlockUser(ctx context.Context, in *MessageHubBlockUserRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// MessageHubService JSON Client
// =============================

type messageHubServiceJSONClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMessageHubServiceJSONClient creates a JSON client that implements the MessageHubService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMessageHubServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) MessageHubService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "rpc", "MessageHubService")
	urls := [11]string{
		serviceURL + "Create",
		serviceURL + "Register",
		serviceURL + "Hubs",
		serviceURL + "Verify",
		serviceURL + "Approve",
		serviceURL + "Remove",
		serviceURL + "SetPostLimit",
		serviceURL + "SetAllowFriendGroups",
		serviceURL + "SetExpirationDays",
		serviceURL + "ReportMessage",
		serviceURL + "BlockUser",
	}

	return &messageHubServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *messageHubServiceJSONClient) Create(ctx context.Context, in *MessageHubCreateRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	caller := c.callCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubCreateRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubCreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubCreateRequest) when calling interceptor")
					}
					return c.callCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callCreate(ctx context.Context, in *MessageHubCreateRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) Register(ctx context.Context, in *MessageHubRegisterRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubRegisterRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRegisterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRegisterRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callRegister(ctx context.Context, in *MessageHubRegisterRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) Hubs(ctx context.Context, in *Empty) (*MessageHubHubsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Hubs")
	caller := c.callHubs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *Empty) (*MessageHubHubsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return c.callHubs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubHubsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubHubsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callHubs(ctx context.Context, in *Empty) (*MessageHubHubsResponse, error) {
	out := new(MessageHubHubsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) Verify(ctx context.Context, in *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Verify")
	caller := c.callVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubVerifyRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubVerifyRequest) when calling interceptor")
					}
					return c.callVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubVerifyResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubVerifyResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callVerify(ctx context.Context, in *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
	out := new(MessageHubVerifyResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) Approve(ctx context.Context, in *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Approve")
	caller := c.callApprove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubApproveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubApproveRequest) when calling interceptor")
					}
					return c.callApprove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubApproveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubApproveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callApprove(ctx context.Context, in *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
	out := new(MessageHubApproveResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) Remove(ctx context.Context, in *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	caller := c.callRemove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRemoveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRemoveRequest) when calling interceptor")
					}
					return c.callRemove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubRemoveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubRemoveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callRemove(ctx context.Context, in *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
	out := new(MessageHubRemoveResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) SetPostLimit(ctx context.Context, in *MessageHubSetPostLimitRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetPostLimit")
	caller := c.callSetPostLimit
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetPostLimitRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetPostLimitRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetPostLimitRequest) when calling interceptor")
					}
					return c.callSetPostLimit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callSetPostLimit(ctx context.Context, in *MessageHubSetPostLimitRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) SetAllowFriendGroups(ctx context.Context, in *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetAllowFriendGroups")
	caller := c.callSetAllowFriendGroups
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetAllowFriendGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetAllowFriendGroupsRequest) when calling interceptor")
					}
					return c.callSetAllowFriendGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callSetAllowFriendGroups(ctx context.Context, in *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) SetExpirationDays(ctx context.Context, in *MessageHubSetExpirationDaysRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "SetExpirationDays")
	caller := c.callSetExpirationDays
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubSetExpirationDaysRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetExpirationDaysRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetExpirationDaysRequest) when calling interceptor")
					}
					return c.callSetExpirationDays(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callSetExpirationDays(ctx context.Context, in *MessageHubSetExpirationDaysRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) ReportMessage(ctx context.Context, in *MessageHubReportMessageRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	caller := c.callReportMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubReportMessageRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubReportMessageRequest) when calling interceptor")
					}
					return c.callReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callReportMessage(ctx context.Context, in *MessageHubReportMessageRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageHubServiceJSONClient) BlockUser(ctx context.Context, in *MessageHubBlockUserRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithMethodName(ctx, "BlockUser")
	caller := c.callBlockUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageHubBlockUserRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubBlockUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubBlockUserRequest) when calling interceptor")
					}
					return c.callBlockUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageHubServiceJSONClient) callBlockUser(ctx context.Context, in *MessageHubBlockUserRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ================================
// MessageHubService Server Handler
// ================================

type messageHubServiceServer struct {
	MessageHubService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewMessageHubServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewMessageHubServiceServer(svc MessageHubService, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewMessageHubServiceServer", o))
		}
	}

	return &messageHubServiceServer{
		MessageHubService: svc,
		pathPrefix:        serverOpts.PathPrefix(),
		interceptor:       twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:             serverOpts.Hooks,
		jsonSkipDefaults:  serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *messageHubServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *messageHubServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// MessageHubServicePathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const MessageHubServicePathPrefix = "/twirp/rpc.MessageHubService/"

func (s *messageHubServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "rpc.MessageHubService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Create":
		s.serveCreate(ctx, resp, req)
		return
	case "Register":
		s.serveRegister(ctx, resp, req)
		return
	case "Hubs":
		s.serveHubs(ctx, resp, req)
		return
	case "Verify":
		s.serveVerify(ctx, resp, req)
		return
	case "Approve":
		s.serveApprove(ctx, resp, req)
		return
	case "Remove":
		s.serveRemove(ctx, resp, req)
		return
	case "SetPostLimit":
		s.serveSetPostLimit(ctx, resp, req)
		return
	case "SetAllowFriendGroups":
		s.serveSetAllowFriendGroups(ctx, resp, req)
		return
	case "SetExpirationDays":
		s.serveSetExpirationDays(ctx, resp, req)
		return
	case "ReportMessage":
		s.serveReportMessage(ctx, resp, req)
		return
	case "BlockUser":
		s.serveBlockUser(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *messageHubServiceServer) serveCreate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveCreateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubCreateRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Create
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubCreateRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubCreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubCreateRequest) when calling interceptor")
					}
					return s.MessageHubService.Create(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Create. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveCreateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubCreateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Create
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubCreateRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubCreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubCreateRequest) when calling interceptor")
					}
					return s.MessageHubService.Create(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Create. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveRegister(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveRegisterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubRegisterRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubRegisterRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRegisterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRegisterRequest) when calling interceptor")
					}
					return s.MessageHubService.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveRegisterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubRegisterRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubRegisterRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRegisterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRegisterRequest) when calling interceptor")
					}
					return s.MessageHubService.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveHubs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveHubsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveHubsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveHubsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Hubs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Hubs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *Empty) (*MessageHubHubsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return s.MessageHubService.Hubs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubHubsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubHubsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubHubsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubHubsResponse and nil error while calling Hubs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveHubsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Hubs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Hubs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *Empty) (*MessageHubHubsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return s.MessageHubService.Hubs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubHubsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubHubsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubHubsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubHubsResponse and nil error while calling Hubs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveVerify(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerifyJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerifyProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveVerifyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Verify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubVerifyRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Verify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubVerifyRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubVerifyRequest) when calling interceptor")
					}
					return s.MessageHubService.Verify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubVerifyResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubVerifyResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubVerifyResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubVerifyResponse and nil error while calling Verify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveVerifyProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Verify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubVerifyRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Verify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubVerifyRequest) (*MessageHubVerifyResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubVerifyRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubVerifyRequest) when calling interceptor")
					}
					return s.MessageHubService.Verify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubVerifyResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubVerifyResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubVerifyResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubVerifyResponse and nil error while calling Verify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveApprove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveApproveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveApproveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveApproveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Approve")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubApproveRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Approve
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubApproveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubApproveRequest) when calling interceptor")
					}
					return s.MessageHubService.Approve(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubApproveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubApproveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubApproveResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubApproveResponse and nil error while calling Approve. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveApproveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Approve")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubApproveRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Approve
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubApproveRequest) (*MessageHubApproveResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubApproveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubApproveRequest) when calling interceptor")
					}
					return s.MessageHubService.Approve(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubApproveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubApproveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubApproveResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubApproveResponse and nil error while calling Approve. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveRemove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveRemoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubRemoveRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.Remove
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRemoveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRemoveRequest) when calling interceptor")
					}
					return s.MessageHubService.Remove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubRemoveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubRemoveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubRemoveResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubRemoveResponse and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveRemoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubRemoveRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.Remove
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubRemoveRequest) (*MessageHubRemoveResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubRemoveRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubRemoveRequest) when calling interceptor")
					}
					return s.MessageHubService.Remove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageHubRemoveResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageHubRemoveResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageHubRemoveResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageHubRemoveResponse and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetPostLimit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetPostLimitJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetPostLimitProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveSetPostLimitJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPostLimit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubSetPostLimitRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.SetPostLimit
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetPostLimitRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetPostLimitRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetPostLimitRequest) when calling interceptor")
					}
					return s.MessageHubService.SetPostLimit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetPostLimit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetPostLimitProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPostLimit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubSetPostLimitRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.SetPostLimit
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetPostLimitRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetPostLimitRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetPostLimitRequest) when calling interceptor")
					}
					return s.MessageHubService.SetPostLimit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetPostLimit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetAllowFriendGroups(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetAllowFriendGroupsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetAllowFriendGroupsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveSetAllowFriendGroupsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetAllowFriendGroups")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubSetAllowFriendGroupsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.SetAllowFriendGroups
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetAllowFriendGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetAllowFriendGroupsRequest) when calling interceptor")
					}
					return s.MessageHubService.SetAllowFriendGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetAllowFriendGroups. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetAllowFriendGroupsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetAllowFriendGroups")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubSetAllowFriendGroupsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.SetAllowFriendGroups
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetAllowFriendGroupsRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetAllowFriendGroupsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetAllowFriendGroupsRequest) when calling interceptor")
					}
					return s.MessageHubService.SetAllowFriendGroups(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetAllowFriendGroups. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetExpirationDays(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetExpirationDaysJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetExpirationDaysProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveSetExpirationDaysJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetExpirationDays")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubSetExpirationDaysRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.SetExpirationDays
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetExpirationDaysRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetExpirationDaysRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetExpirationDaysRequest) when calling interceptor")
					}
					return s.MessageHubService.SetExpirationDays(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetExpirationDays. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveSetExpirationDaysProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetExpirationDays")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubSetExpirationDaysRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.SetExpirationDays
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubSetExpirationDaysRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubSetExpirationDaysRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubSetExpirationDaysRequest) when calling interceptor")
					}
					return s.MessageHubService.SetExpirationDays(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetExpirationDays. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveReportMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveReportMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubReportMessageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.ReportMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubReportMessageRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubReportMessageRequest) when calling interceptor")
					}
					return s.MessageHubService.ReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling ReportMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveReportMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubReportMessageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.ReportMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubReportMessageRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubReportMessageRequest) when calling interceptor")
					}
					return s.MessageHubService.ReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling ReportMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveBlockUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBlockUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBlockUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubServiceServer) serveBlockUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BlockUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubBlockUserRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.MessageHubService.BlockUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubBlockUserRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubBlockUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubBlockUserRequest) when calling interceptor")
					}
					return s.MessageHubService.BlockUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling BlockUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) serveBlockUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BlockUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(MessageHubBlockUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageHubService.BlockUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageHubBlockUserRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageHubBlockUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageHubBlockUserRequest) when calling interceptor")
					}
					return s.MessageHubService.BlockUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling BlockUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor6, 0
}

func (s *messageHubServiceServer) ProtocGenTwirpVersion() string {
	return "v7.2.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *messageHubServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "rpc", "MessageHubService")
}

var twirpFileDescriptor6 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcb, 0x4e, 0xdb, 0x4a,
	0x18, 0x56, 0x4c, 0x6e, 0xfe, 0x73, 0x0e, 0xe7, 0x30, 0x27, 0x1c, 0x4c, 0x20, 0x50, 0xb9, 0xaa,
	0x40, 0x5d, 0x04, 0x08, 0x12, 0xea, 0xaa, 0x6a, 0x68, 0x69, 0x83, 0x44, 0x51, 0xe5, 0x42, 0x17,
	0xdd, 0x44, 0xbe, 0x0c, 0xc4, 0x6a, 0xe2, 0x71, 0x67, 0xc6, 0xd0, 0xbc, 0x4c, 0x5f, 0xa2, 0x0f,
	0xd3, 0x5d, 0x9f, 0xa5, 0xf2, 0x8c, 0x9d, 0x78, 0xec, 0x5c, 0xba, 0xfc, 0xaf, 0xf3, 0xe5, 0x9b,
	0xef, 0x1b, 0x07, 0xfe, 0x1d, 0x63, 0xc6, 0xec, 0x7b, 0x3c, 0x8c, 0x9c, 0x4e, 0x48, 0x09, 0x27,
	0x68, 0x8d, 0x86, 0x6e, 0xab, 0x31, 0x26, 0x1e, 0x1e, 0xc9, 0x8c, 0xf9, 0xa3, 0x04, 0x5b, 0xef,
	0x65, 0x5b, 0x3f, 0x72, 0x5e, 0x53, 0x6c, 0x73, 0x6c, 0xe1, 0xaf, 0x11, 0x66, 0x1c, 0x35, 0xa1,
	0x42, 0x1e, 0x03, 0x4c, 0x8d, 0xd2, 0x93, 0xd2, 0xa1, 0x6e, 0xc9, 0x00, 0xed, 0x82, 0xce, 0x22,
	0xc7, 0x23, 0x63, 0xdb, 0x0f, 0x0c, 0x4d, 0x54, 0x66, 0x89, 0x78, 0x26, 0x20, 0x1c, 0x33, 0x63,
	0x4d, 0xce, 0x88, 0x00, 0x6d, 0x43, 0x7d, 0x18, 0x39, 0x03, 0x3e, 0x09, 0xb1, 0x51, 0x16, 0x85,
	0xda, 0x30, 0x72, 0x6e, 0x26, 0x21, 0x46, 0xa7, 0xb0, 0xc9, 0xa9, 0x1d, 0x30, 0xdb, 0xe5, 0x3e,
	0x09, 0x06, 0x14, 0xdf, 0x61, 0x8a, 0x03, 0x17, 0x1b, 0x15, 0xd1, 0xd7, 0xcc, 0x14, 0xad, 0xb4,
	0x66, 0x7e, 0x2f, 0xc1, 0xf6, 0x0c, 0xb5, 0x85, 0xef, 0x7d, 0xc6, 0x31, 0x4d, 0x71, 0x1b, 0x50,
	0xb3, 0x3d, 0x8f, 0x62, 0xc6, 0x12, 0xe4, 0x69, 0x18, 0x57, 0x3c, 0xcc, 0x6d, 0x7f, 0xc4, 0x12,
	0xe4, 0x69, 0x88, 0xda, 0x00, 0x21, 0x61, 0x7c, 0x30, 0xf2, 0xc7, 0x3e, 0x17, 0xe0, 0x2b, 0x96,
	0x1e, 0x67, 0xae, 0xe2, 0x04, 0xea, 0xc0, 0x7f, 0xf6, 0x68, 0x44, 0x1e, 0x07, 0x77, 0xd4, 0xc7,
	0x81, 0x37, 0xb8, 0xa7, 0x24, 0x0a, 0x99, 0xf8, 0x2d, 0x75, 0x6b, 0x43, 0x94, 0xde, 0x8a, 0xca,
	0x3b, 0x51, 0x30, 0x7f, 0x6a, 0x59, 0x80, 0xfd, 0xc8, 0x61, 0x16, 0x66, 0x21, 0x09, 0x58, 0x1c,
	0xa2, 0x75, 0xd0, 0x7c, 0x2f, 0xc1, 0xa6, 0xf9, 0x5e, 0x16, 0xb0, 0xa6, 0x02, 0x6e, 0x43, 0x39,
	0x62, 0x98, 0x0a, 0x40, 0x8d, 0xae, 0xde, 0xa1, 0xa1, 0xdb, 0xb9, 0x65, 0x98, 0x5a, 0x22, 0x1d,
	0xa3, 0x76, 0xc5, 0x95, 0x79, 0x03, 0x9b, 0x27, 0xcc, 0xea, 0x49, 0xa6, 0xc7, 0xd1, 0x3e, 0x34,
	0xec, 0x30, 0xa4, 0xe4, 0x41, 0xd6, 0x25, 0xa3, 0x90, 0xa6, 0x64, 0x83, 0xe7, 0x33, 0xdb, 0x19,
	0xc9, 0x86, 0xaa, 0x6c, 0x48, 0x53, 0x3d, 0x9e, 0x25, 0xac, 0xb6, 0x8c, 0xb0, 0xfa, 0x1f, 0x12,
	0xa6, 0x2f, 0x20, 0x0c, 0x1d, 0xc0, 0x3f, 0xf8, 0x5b, 0xe8, 0x53, 0x5b, 0xa8, 0xc0, 0xb3, 0x27,
	0xcc, 0x00, 0xb1, 0x73, 0x7d, 0x96, 0x7e, 0x63, 0x4f, 0x98, 0x79, 0x05, 0xff, 0xcf, 0x27, 0x16,
	0x75, 0xa1, 0x3c, 0x8c, 0x9c, 0xf8, 0xce, 0xd7, 0x0e, 0x1b, 0xdd, 0x3d, 0xc1, 0xd5, 0xc2, 0x3b,
	0xb0, 0x44, 0xaf, 0x79, 0x9c, 0x55, 0xff, 0x27, 0x4c, 0xfd, 0xbb, 0x49, 0xaa, 0xa2, 0x4d, 0xa8,
	0xc6, 0x9a, 0x9d, 0x5e, 0x54, 0x65, 0x18, 0x39, 0x97, 0x9e, 0x79, 0x0c, 0x46, 0x71, 0x22, 0x41,
	0xd0, 0x84, 0x0a, 0xa6, 0x94, 0x4c, 0x0d, 0x23, 0x02, 0xf3, 0x24, 0x3b, 0xd1, 0x93, 0xe4, 0xaf,
	0x38, 0xe4, 0x24, 0xab, 0x9e, 0xe9, 0xc8, 0xd2, 0x53, 0xae, 0xb3, 0xbf, 0xc4, 0xc2, 0xe3, 0x95,
	0x87, 0x2c, 0x37, 0xb2, 0x79, 0x96, 0x45, 0x9d, 0xee, 0x4b, 0x10, 0xb4, 0xa0, 0x9e, 0x3c, 0x2d,
	0x92, 0x6d, 0xdd, 0x9a, 0xc6, 0xe6, 0x2d, 0xb4, 0x67, 0x73, 0x1f, 0x31, 0xff, 0x90, 0x4a, 0x62,
	0x05, 0x1a, 0x55, 0x4f, 0x5a, 0x4e, 0x4f, 0x66, 0x00, 0xcf, 0x94, 0xb5, 0xbd, 0xbc, 0x82, 0x56,
	0xac, 0x5f, 0xa0, 0x47, 0x6d, 0x91, 0x81, 0x3d, 0x30, 0x95, 0xf3, 0x2e, 0x14, 0x15, 0xae, 0x38,
	0x6c, 0x8e, 0x98, 0xb5, 0xb9, 0x62, 0xbe, 0x81, 0xbd, 0x2c, 0xc9, 0x21, 0xa1, 0x3c, 0x89, 0x57,
	0x9c, 0xb0, 0x03, 0x3a, 0x15, 0xed, 0x71, 0x45, 0xde, 0x5d, 0x5d, 0x26, 0x2e, 0x3d, 0xf3, 0x0a,
	0x5a, 0xb3, 0xad, 0xe7, 0x23, 0xe2, 0x7e, 0x11, 0x4f, 0xc6, 0xf2, 0x8d, 0x5b, 0x50, 0x8b, 0x9f,
	0x94, 0xd9, 0xbe, 0x6a, 0x1c, 0x5e, 0x7a, 0xdd, 0x5f, 0x15, 0xd8, 0xc8, 0x52, 0x41, 0x1f, 0x7c,
	0x37, 0x36, 0x5b, 0x55, 0x7e, 0x2c, 0xd0, 0x6e, 0xce, 0x68, 0xca, 0x37, 0xa4, 0x05, 0xa2, 0x7a,
	0x31, 0x0e, 0xf9, 0x04, 0x9d, 0x41, 0x3d, 0x7d, 0xaa, 0x51, 0xde, 0x9e, 0xb9, 0x37, 0x5c, 0x99,
	0x3b, 0x82, 0x72, 0xec, 0x5e, 0x94, 0xc9, 0xb5, 0x76, 0x96, 0xd8, 0x1b, 0x5d, 0x40, 0x55, 0x3a,
	0xb3, 0x00, 0x4e, 0xb1, 0x78, 0xab, 0xbd, 0xa0, 0x9a, 0xac, 0xe9, 0x43, 0x2d, 0xf1, 0x1e, 0xca,
	0x77, 0xaa, 0x36, 0x6e, 0xed, 0x2d, 0x2a, 0xcf, 0x00, 0x49, 0x0b, 0x15, 0x00, 0x29, 0x4e, 0x2d,
	0x00, 0xca, 0xf9, 0xee, 0x25, 0xfc, 0x95, 0x75, 0x14, 0x32, 0x73, 0xed, 0x73, 0xec, 0xa6, 0x10,
	0x79, 0x0d, 0xcd, 0x79, 0xd6, 0x41, 0xcf, 0x8b, 0x7b, 0x16, 0xf9, 0x4b, 0xd9, 0xd7, 0x87, 0x8d,
	0x82, 0x35, 0xd0, 0x41, 0x71, 0xd9, 0x5c, 0xf3, 0x28, 0x9b, 0x5e, 0xc1, 0xdf, 0x8a, 0xfc, 0xd1,
	0xd3, 0x02, 0x13, 0x45, 0x73, 0x28, 0x1b, 0x5e, 0x80, 0x3e, 0x95, 0x3a, 0xda, 0xcf, 0x4d, 0xe7,
	0x4d, 0x90, 0x9d, 0x3c, 0xaf, 0x7f, 0xae, 0x76, 0x3a, 0x47, 0x34, 0x74, 0x9d, 0xaa, 0xf8, 0x4f,
	0x74, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xef, 0x31, 0xf0, 0xee, 0x39, 0x09, 0x00, 0x00,
}
