// Code generated by protoc-gen-twirp v5.12.0, DO NOT EDIT.
// source: messagehub_notification.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =======================================
// MessageHubNotificationService Interface
// =======================================

type MessageHubNotificationService interface {
	PostNotifications(context.Context, *MessageHubNotificationPostNotificationsRequest) (*Empty, error)
}

// =============================================
// MessageHubNotificationService Protobuf Client
// =============================================

type messageHubNotificationServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
	opts   twirp.ClientOptions
}

// NewMessageHubNotificationServiceProtobufClient creates a Protobuf client that implements the MessageHubNotificationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMessageHubNotificationServiceProtobufClient(addr string, client HTTPClient, opts ...twirp.ClientOption) MessageHubNotificationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + MessageHubNotificationServicePathPrefix
	urls := [1]string{
		prefix + "PostNotifications",
	}

	return &messageHubNotificationServiceProtobufClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *messageHubNotificationServiceProtobufClient) PostNotifications(ctx context.Context, in *MessageHubNotificationPostNotificationsRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubNotificationService")
	ctx = ctxsetters.WithMethodName(ctx, "PostNotifications")
	out := new(Empty)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =========================================
// MessageHubNotificationService JSON Client
// =========================================

type messageHubNotificationServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
	opts   twirp.ClientOptions
}

// NewMessageHubNotificationServiceJSONClient creates a JSON client that implements the MessageHubNotificationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMessageHubNotificationServiceJSONClient(addr string, client HTTPClient, opts ...twirp.ClientOption) MessageHubNotificationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + MessageHubNotificationServicePathPrefix
	urls := [1]string{
		prefix + "PostNotifications",
	}

	return &messageHubNotificationServiceJSONClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *messageHubNotificationServiceJSONClient) PostNotifications(ctx context.Context, in *MessageHubNotificationPostNotificationsRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubNotificationService")
	ctx = ctxsetters.WithMethodName(ctx, "PostNotifications")
	out := new(Empty)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================================
// MessageHubNotificationService Server Handler
// ============================================

type messageHubNotificationServiceServer struct {
	MessageHubNotificationService
	hooks *twirp.ServerHooks
}

func NewMessageHubNotificationServiceServer(svc MessageHubNotificationService, hooks *twirp.ServerHooks) TwirpServer {
	return &messageHubNotificationServiceServer{
		MessageHubNotificationService: svc,
		hooks:                         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *messageHubNotificationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MessageHubNotificationServicePathPrefix is used for all URL paths on a twirp MessageHubNotificationService server.
// Requests are always: POST MessageHubNotificationServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MessageHubNotificationServicePathPrefix = "/rpc.MessageHubNotificationService/"

func (s *messageHubNotificationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageHubNotificationService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/rpc.MessageHubNotificationService/PostNotifications":
		s.servePostNotifications(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *messageHubNotificationServiceServer) servePostNotifications(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePostNotificationsJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePostNotificationsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageHubNotificationServiceServer) servePostNotificationsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageHubNotificationPostNotificationsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MessageHubNotificationService.PostNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling PostNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubNotificationServiceServer) servePostNotificationsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageHubNotificationPostNotificationsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MessageHubNotificationService.PostNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling PostNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageHubNotificationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *messageHubNotificationServiceServer) ProtocGenTwirpVersion() string {
	return "v5.12.0"
}

func (s *messageHubNotificationServiceServer) PathPrefix() string {
	return MessageHubNotificationServicePathPrefix
}

var twirpFileDescriptor4 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xcd, 0x28, 0x4d, 0x8a, 0xcf, 0xcb, 0x2f, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c,
	0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0xe2,
	0xce, 0xcd, 0x4f, 0x49, 0xcd, 0x81, 0x88, 0x28, 0x95, 0x72, 0xe9, 0xf9, 0x42, 0xb4, 0x78, 0x94,
	0x26, 0xf9, 0x21, 0xe9, 0x08, 0xc8, 0x2f, 0x2e, 0x41, 0xe6, 0x17, 0x07, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0xe5, 0xa7, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x42, 0xfa, 0x5c, 0xc2, 0xc8, 0xb6, 0x15, 0xc7, 0x97, 0xe4, 0x67, 0xa7, 0xe6,
	0x49, 0x30, 0x81, 0x95, 0x08, 0xa1, 0x48, 0x85, 0x80, 0x64, 0x8c, 0x4a, 0xb9, 0x64, 0xb1, 0x5b,
	0x1b, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x14, 0xc2, 0x25, 0x88, 0xe1, 0x02, 0x21, 0x63,
	0xbd, 0xa2, 0x82, 0x64, 0x12, 0xdd, 0x2b, 0xc5, 0x05, 0xd6, 0xe4, 0x9a, 0x5b, 0x50, 0x52, 0xe9,
	0xc4, 0x11, 0xc5, 0xa6, 0xa7, 0xa7, 0x5f, 0x54, 0x90, 0x9c, 0xc4, 0x06, 0xf6, 0xbe, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0xf4, 0x24, 0x30, 0x31, 0x01, 0x00, 0x00,
}
