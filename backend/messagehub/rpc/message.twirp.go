// Code generated by protoc-gen-twirp v7.1.1, DO NOT EDIT.
// source: message.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// ========================
// MessageService Interface
// ========================

type MessageService interface {
	Messages(context.Context, *MessageMessagesRequest) (*MessageMessagesResponse, error)

	Message(context.Context, *MessageMessageRequest) (*MessageMessageResponse, error)

	Post(context.Context, *MessagePostRequest) (*MessagePostResponse, error)

	Edit(context.Context, *MessageEditRequest) (*MessageEditResponse, error)

	Delete(context.Context, *MessageDeleteRequest) (*Empty, error)

	PostComment(context.Context, *MessagePostCommentRequest) (*MessagePostCommentResponse, error)

	EditComment(context.Context, *MessageEditCommentRequest) (*MessageEditCommentResponse, error)

	DeleteComment(context.Context, *MessageDeleteCommentRequest) (*Empty, error)

	LikeMessage(context.Context, *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error)

	LikeComment(context.Context, *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error)

	MessageLikes(context.Context, *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error)

	CommentLikes(context.Context, *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error)

	SetMessageVisibility(context.Context, *MessageSetMessageVisibilityRequest) (*Empty, error)

	SetCommentVisibility(context.Context, *MessageSetCommentVisibilityRequest) (*Empty, error)

	ReportMessage(context.Context, *MessageReportMessageRequest) (*MessageReportMessageResponse, error)

	MessageReport(context.Context, *MessageMessageReportRequest) (*MessageMessageReportResponse, error)

	MessageReports(context.Context, *Empty) (*MessageMessageReportsResponse, error)

	DeleteReportedMessage(context.Context, *MessageDeleteReportedMessageRequest) (*Empty, error)

	BlockReportedUser(context.Context, *MessageBlockReportedUserRequest) (*Empty, error)

	ResolveMessageReport(context.Context, *MessageResolveMessageReportRequest) (*Empty, error)

	MarkRead(context.Context, *MessageMarkReadRequest) (*Empty, error)

	Counters(context.Context, *MessageCountersRequest) (*MessageCountersResponse, error)
}

// ==============================
// MessageService Protobuf Client
// ==============================

type messageServiceProtobufClient struct {
	client      HTTPClient
	urls        [22]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMessageServiceProtobufClient creates a Protobuf client that implements the MessageService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMessageServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) MessageService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "rpc", "MessageService")
	urls := [22]string{
		serviceURL + "Messages",
		serviceURL + "Message",
		serviceURL + "Post",
		serviceURL + "Edit",
		serviceURL + "Delete",
		serviceURL + "PostComment",
		serviceURL + "EditComment",
		serviceURL + "DeleteComment",
		serviceURL + "LikeMessage",
		serviceURL + "LikeComment",
		serviceURL + "MessageLikes",
		serviceURL + "CommentLikes",
		serviceURL + "SetMessageVisibility",
		serviceURL + "SetCommentVisibility",
		serviceURL + "ReportMessage",
		serviceURL + "MessageReport",
		serviceURL + "MessageReports",
		serviceURL + "DeleteReportedMessage",
		serviceURL + "BlockReportedUser",
		serviceURL + "ResolveMessageReport",
		serviceURL + "MarkRead",
		serviceURL + "Counters",
	}

	return &messageServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *messageServiceProtobufClient) Messages(ctx context.Context, in *MessageMessagesRequest) (*MessageMessagesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Messages")
	caller := c.callMessages
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessagesRequest) (*MessageMessagesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessagesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessagesRequest) when calling interceptor")
					}
					return c.callMessages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessagesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessagesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMessages(ctx context.Context, in *MessageMessagesRequest) (*MessageMessagesResponse, error) {
	out := new(MessageMessagesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) Message(ctx context.Context, in *MessageMessageRequest) (*MessageMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Message")
	caller := c.callMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageRequest) (*MessageMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageRequest) when calling interceptor")
					}
					return c.callMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMessage(ctx context.Context, in *MessageMessageRequest) (*MessageMessageResponse, error) {
	out := new(MessageMessageResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) Post(ctx context.Context, in *MessagePostRequest) (*MessagePostResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Post")
	caller := c.callPost
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessagePostRequest) (*MessagePostResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostRequest) when calling interceptor")
					}
					return c.callPost(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callPost(ctx context.Context, in *MessagePostRequest) (*MessagePostResponse, error) {
	out := new(MessagePostResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) Edit(ctx context.Context, in *MessageEditRequest) (*MessageEditResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Edit")
	caller := c.callEdit
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageEditRequest) (*MessageEditResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditRequest) when calling interceptor")
					}
					return c.callEdit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callEdit(ctx context.Context, in *MessageEditRequest) (*MessageEditResponse, error) {
	out := new(MessageEditResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) Delete(ctx context.Context, in *MessageDeleteRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callDelete(ctx context.Context, in *MessageDeleteRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) PostComment(ctx context.Context, in *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "PostComment")
	caller := c.callPostComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostCommentRequest) when calling interceptor")
					}
					return c.callPostComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callPostComment(ctx context.Context, in *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
	out := new(MessagePostCommentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) EditComment(ctx context.Context, in *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "EditComment")
	caller := c.callEditComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditCommentRequest) when calling interceptor")
					}
					return c.callEditComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callEditComment(ctx context.Context, in *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
	out := new(MessageEditCommentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) DeleteComment(ctx context.Context, in *MessageDeleteCommentRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteComment")
	caller := c.callDeleteComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteCommentRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteCommentRequest) when calling interceptor")
					}
					return c.callDeleteComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callDeleteComment(ctx context.Context, in *MessageDeleteCommentRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) LikeMessage(ctx context.Context, in *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "LikeMessage")
	caller := c.callLikeMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeMessageRequest) when calling interceptor")
					}
					return c.callLikeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callLikeMessage(ctx context.Context, in *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
	out := new(MessageLikeMessageResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) LikeComment(ctx context.Context, in *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "LikeComment")
	caller := c.callLikeComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeCommentRequest) when calling interceptor")
					}
					return c.callLikeComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callLikeComment(ctx context.Context, in *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
	out := new(MessageLikeCommentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) MessageLikes(ctx context.Context, in *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageLikes")
	caller := c.callMessageLikes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageLikesRequest) when calling interceptor")
					}
					return c.callMessageLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMessageLikes(ctx context.Context, in *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
	out := new(MessageMessageLikesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) CommentLikes(ctx context.Context, in *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "CommentLikes")
	caller := c.callCommentLikes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCommentLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCommentLikesRequest) when calling interceptor")
					}
					return c.callCommentLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCommentLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCommentLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callCommentLikes(ctx context.Context, in *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
	out := new(MessageCommentLikesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) SetMessageVisibility(ctx context.Context, in *MessageSetMessageVisibilityRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "SetMessageVisibility")
	caller := c.callSetMessageVisibility
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageSetMessageVisibilityRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetMessageVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetMessageVisibilityRequest) when calling interceptor")
					}
					return c.callSetMessageVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callSetMessageVisibility(ctx context.Context, in *MessageSetMessageVisibilityRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) SetCommentVisibility(ctx context.Context, in *MessageSetCommentVisibilityRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "SetCommentVisibility")
	caller := c.callSetCommentVisibility
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageSetCommentVisibilityRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetCommentVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetCommentVisibilityRequest) when calling interceptor")
					}
					return c.callSetCommentVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callSetCommentVisibility(ctx context.Context, in *MessageSetCommentVisibilityRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) ReportMessage(ctx context.Context, in *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	caller := c.callReportMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageReportMessageRequest) when calling interceptor")
					}
					return c.callReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageReportMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageReportMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callReportMessage(ctx context.Context, in *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
	out := new(MessageReportMessageResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) MessageReport(ctx context.Context, in *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageReport")
	caller := c.callMessageReport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageReportRequest) when calling interceptor")
					}
					return c.callMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMessageReport(ctx context.Context, in *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
	out := new(MessageMessageReportResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) MessageReports(ctx context.Context, in *Empty) (*MessageMessageReportsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageReports")
	caller := c.callMessageReports
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *Empty) (*MessageMessageReportsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return c.callMessageReports(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMessageReports(ctx context.Context, in *Empty) (*MessageMessageReportsResponse, error) {
	out := new(MessageMessageReportsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) DeleteReportedMessage(ctx context.Context, in *MessageDeleteReportedMessageRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteReportedMessage")
	caller := c.callDeleteReportedMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteReportedMessageRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteReportedMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteReportedMessageRequest) when calling interceptor")
					}
					return c.callDeleteReportedMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callDeleteReportedMessage(ctx context.Context, in *MessageDeleteReportedMessageRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) BlockReportedUser(ctx context.Context, in *MessageBlockReportedUserRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "BlockReportedUser")
	caller := c.callBlockReportedUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageBlockReportedUserRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageBlockReportedUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageBlockReportedUserRequest) when calling interceptor")
					}
					return c.callBlockReportedUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callBlockReportedUser(ctx context.Context, in *MessageBlockReportedUserRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) ResolveMessageReport(ctx context.Context, in *MessageResolveMessageReportRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "ResolveMessageReport")
	caller := c.callResolveMessageReport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageResolveMessageReportRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageResolveMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageResolveMessageReportRequest) when calling interceptor")
					}
					return c.callResolveMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callResolveMessageReport(ctx context.Context, in *MessageResolveMessageReportRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) MarkRead(ctx context.Context, in *MessageMarkReadRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MarkRead")
	caller := c.callMarkRead
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMarkReadRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMarkReadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMarkReadRequest) when calling interceptor")
					}
					return c.callMarkRead(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callMarkRead(ctx context.Context, in *MessageMarkReadRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceProtobufClient) Counters(ctx context.Context, in *MessageCountersRequest) (*MessageCountersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Counters")
	caller := c.callCounters
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageCountersRequest) (*MessageCountersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCountersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCountersRequest) when calling interceptor")
					}
					return c.callCounters(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCountersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCountersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceProtobufClient) callCounters(ctx context.Context, in *MessageCountersRequest) (*MessageCountersResponse, error) {
	out := new(MessageCountersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// MessageService JSON Client
// ==========================

type messageServiceJSONClient struct {
	client      HTTPClient
	urls        [22]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMessageServiceJSONClient creates a JSON client that implements the MessageService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMessageServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) MessageService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "rpc", "MessageService")
	urls := [22]string{
		serviceURL + "Messages",
		serviceURL + "Message",
		serviceURL + "Post",
		serviceURL + "Edit",
		serviceURL + "Delete",
		serviceURL + "PostComment",
		serviceURL + "EditComment",
		serviceURL + "DeleteComment",
		serviceURL + "LikeMessage",
		serviceURL + "LikeComment",
		serviceURL + "MessageLikes",
		serviceURL + "CommentLikes",
		serviceURL + "SetMessageVisibility",
		serviceURL + "SetCommentVisibility",
		serviceURL + "ReportMessage",
		serviceURL + "MessageReport",
		serviceURL + "MessageReports",
		serviceURL + "DeleteReportedMessage",
		serviceURL + "BlockReportedUser",
		serviceURL + "ResolveMessageReport",
		serviceURL + "MarkRead",
		serviceURL + "Counters",
	}

	return &messageServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *messageServiceJSONClient) Messages(ctx context.Context, in *MessageMessagesRequest) (*MessageMessagesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Messages")
	caller := c.callMessages
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessagesRequest) (*MessageMessagesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessagesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessagesRequest) when calling interceptor")
					}
					return c.callMessages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessagesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessagesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMessages(ctx context.Context, in *MessageMessagesRequest) (*MessageMessagesResponse, error) {
	out := new(MessageMessagesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) Message(ctx context.Context, in *MessageMessageRequest) (*MessageMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Message")
	caller := c.callMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageRequest) (*MessageMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageRequest) when calling interceptor")
					}
					return c.callMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMessage(ctx context.Context, in *MessageMessageRequest) (*MessageMessageResponse, error) {
	out := new(MessageMessageResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) Post(ctx context.Context, in *MessagePostRequest) (*MessagePostResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Post")
	caller := c.callPost
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessagePostRequest) (*MessagePostResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostRequest) when calling interceptor")
					}
					return c.callPost(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callPost(ctx context.Context, in *MessagePostRequest) (*MessagePostResponse, error) {
	out := new(MessagePostResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) Edit(ctx context.Context, in *MessageEditRequest) (*MessageEditResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Edit")
	caller := c.callEdit
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageEditRequest) (*MessageEditResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditRequest) when calling interceptor")
					}
					return c.callEdit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callEdit(ctx context.Context, in *MessageEditRequest) (*MessageEditResponse, error) {
	out := new(MessageEditResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) Delete(ctx context.Context, in *MessageDeleteRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callDelete(ctx context.Context, in *MessageDeleteRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) PostComment(ctx context.Context, in *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "PostComment")
	caller := c.callPostComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostCommentRequest) when calling interceptor")
					}
					return c.callPostComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callPostComment(ctx context.Context, in *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
	out := new(MessagePostCommentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) EditComment(ctx context.Context, in *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "EditComment")
	caller := c.callEditComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditCommentRequest) when calling interceptor")
					}
					return c.callEditComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callEditComment(ctx context.Context, in *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
	out := new(MessageEditCommentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) DeleteComment(ctx context.Context, in *MessageDeleteCommentRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteComment")
	caller := c.callDeleteComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteCommentRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteCommentRequest) when calling interceptor")
					}
					return c.callDeleteComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callDeleteComment(ctx context.Context, in *MessageDeleteCommentRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) LikeMessage(ctx context.Context, in *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "LikeMessage")
	caller := c.callLikeMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeMessageRequest) when calling interceptor")
					}
					return c.callLikeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callLikeMessage(ctx context.Context, in *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
	out := new(MessageLikeMessageResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) LikeComment(ctx context.Context, in *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "LikeComment")
	caller := c.callLikeComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeCommentRequest) when calling interceptor")
					}
					return c.callLikeComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callLikeComment(ctx context.Context, in *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
	out := new(MessageLikeCommentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) MessageLikes(ctx context.Context, in *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageLikes")
	caller := c.callMessageLikes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageLikesRequest) when calling interceptor")
					}
					return c.callMessageLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMessageLikes(ctx context.Context, in *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
	out := new(MessageMessageLikesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) CommentLikes(ctx context.Context, in *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "CommentLikes")
	caller := c.callCommentLikes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCommentLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCommentLikesRequest) when calling interceptor")
					}
					return c.callCommentLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCommentLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCommentLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callCommentLikes(ctx context.Context, in *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
	out := new(MessageCommentLikesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) SetMessageVisibility(ctx context.Context, in *MessageSetMessageVisibilityRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "SetMessageVisibility")
	caller := c.callSetMessageVisibility
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageSetMessageVisibilityRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetMessageVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetMessageVisibilityRequest) when calling interceptor")
					}
					return c.callSetMessageVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callSetMessageVisibility(ctx context.Context, in *MessageSetMessageVisibilityRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) SetCommentVisibility(ctx context.Context, in *MessageSetCommentVisibilityRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "SetCommentVisibility")
	caller := c.callSetCommentVisibility
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageSetCommentVisibilityRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetCommentVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetCommentVisibilityRequest) when calling interceptor")
					}
					return c.callSetCommentVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callSetCommentVisibility(ctx context.Context, in *MessageSetCommentVisibilityRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) ReportMessage(ctx context.Context, in *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	caller := c.callReportMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageReportMessageRequest) when calling interceptor")
					}
					return c.callReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageReportMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageReportMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callReportMessage(ctx context.Context, in *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
	out := new(MessageReportMessageResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) MessageReport(ctx context.Context, in *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageReport")
	caller := c.callMessageReport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageReportRequest) when calling interceptor")
					}
					return c.callMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMessageReport(ctx context.Context, in *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
	out := new(MessageMessageReportResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) MessageReports(ctx context.Context, in *Empty) (*MessageMessageReportsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MessageReports")
	caller := c.callMessageReports
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *Empty) (*MessageMessageReportsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return c.callMessageReports(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMessageReports(ctx context.Context, in *Empty) (*MessageMessageReportsResponse, error) {
	out := new(MessageMessageReportsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) DeleteReportedMessage(ctx context.Context, in *MessageDeleteReportedMessageRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteReportedMessage")
	caller := c.callDeleteReportedMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageDeleteReportedMessageRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteReportedMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteReportedMessageRequest) when calling interceptor")
					}
					return c.callDeleteReportedMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callDeleteReportedMessage(ctx context.Context, in *MessageDeleteReportedMessageRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) BlockReportedUser(ctx context.Context, in *MessageBlockReportedUserRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "BlockReportedUser")
	caller := c.callBlockReportedUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageBlockReportedUserRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageBlockReportedUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageBlockReportedUserRequest) when calling interceptor")
					}
					return c.callBlockReportedUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callBlockReportedUser(ctx context.Context, in *MessageBlockReportedUserRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) ResolveMessageReport(ctx context.Context, in *MessageResolveMessageReportRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "ResolveMessageReport")
	caller := c.callResolveMessageReport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageResolveMessageReportRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageResolveMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageResolveMessageReportRequest) when calling interceptor")
					}
					return c.callResolveMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callResolveMessageReport(ctx context.Context, in *MessageResolveMessageReportRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) MarkRead(ctx context.Context, in *MessageMarkReadRequest) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "MarkRead")
	caller := c.callMarkRead
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageMarkReadRequest) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMarkReadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMarkReadRequest) when calling interceptor")
					}
					return c.callMarkRead(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callMarkRead(ctx context.Context, in *MessageMarkReadRequest) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *messageServiceJSONClient) Counters(ctx context.Context, in *MessageCountersRequest) (*MessageCountersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithMethodName(ctx, "Counters")
	caller := c.callCounters
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MessageCountersRequest) (*MessageCountersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCountersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCountersRequest) when calling interceptor")
					}
					return c.callCounters(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCountersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCountersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *messageServiceJSONClient) callCounters(ctx context.Context, in *MessageCountersRequest) (*MessageCountersResponse, error) {
	out := new(MessageCountersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// MessageService Server Handler
// =============================

type messageServiceServer struct {
	MessageService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewMessageServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewMessageServiceServer(svc MessageService, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewMessageServiceServer", o))
		}
	}

	return &messageServiceServer{
		MessageService:   svc,
		pathPrefix:       serverOpts.PathPrefix(),
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:            serverOpts.Hooks,
		jsonSkipDefaults: serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *messageServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MessageServicePathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const MessageServicePathPrefix = "/twirp/rpc.MessageService/"

func (s *messageServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "rpc")
	ctx = ctxsetters.WithServiceName(ctx, "MessageService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "rpc.MessageService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Messages":
		s.serveMessages(ctx, resp, req)
		return
	case "Message":
		s.serveMessage(ctx, resp, req)
		return
	case "Post":
		s.servePost(ctx, resp, req)
		return
	case "Edit":
		s.serveEdit(ctx, resp, req)
		return
	case "Delete":
		s.serveDelete(ctx, resp, req)
		return
	case "PostComment":
		s.servePostComment(ctx, resp, req)
		return
	case "EditComment":
		s.serveEditComment(ctx, resp, req)
		return
	case "DeleteComment":
		s.serveDeleteComment(ctx, resp, req)
		return
	case "LikeMessage":
		s.serveLikeMessage(ctx, resp, req)
		return
	case "LikeComment":
		s.serveLikeComment(ctx, resp, req)
		return
	case "MessageLikes":
		s.serveMessageLikes(ctx, resp, req)
		return
	case "CommentLikes":
		s.serveCommentLikes(ctx, resp, req)
		return
	case "SetMessageVisibility":
		s.serveSetMessageVisibility(ctx, resp, req)
		return
	case "SetCommentVisibility":
		s.serveSetCommentVisibility(ctx, resp, req)
		return
	case "ReportMessage":
		s.serveReportMessage(ctx, resp, req)
		return
	case "MessageReport":
		s.serveMessageReport(ctx, resp, req)
		return
	case "MessageReports":
		s.serveMessageReports(ctx, resp, req)
		return
	case "DeleteReportedMessage":
		s.serveDeleteReportedMessage(ctx, resp, req)
		return
	case "BlockReportedUser":
		s.serveBlockReportedUser(ctx, resp, req)
		return
	case "ResolveMessageReport":
		s.serveResolveMessageReport(ctx, resp, req)
		return
	case "MarkRead":
		s.serveMarkRead(ctx, resp, req)
		return
	case "Counters":
		s.serveCounters(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *messageServiceServer) serveMessages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMessagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMessagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMessagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Messages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageMessagesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Messages
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessagesRequest) (*MessageMessagesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessagesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessagesRequest) when calling interceptor")
					}
					return s.MessageService.Messages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessagesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessagesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessagesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessagesResponse and nil error while calling Messages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Messages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageMessagesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Messages
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessagesRequest) (*MessageMessagesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessagesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessagesRequest) when calling interceptor")
					}
					return s.MessageService.Messages(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessagesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessagesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessagesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessagesResponse and nil error while calling Messages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Message")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageMessageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Message
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageRequest) (*MessageMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageRequest) when calling interceptor")
					}
					return s.MessageService.Message(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageResponse and nil error while calling Message. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Message")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageMessageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Message
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageRequest) (*MessageMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageRequest) when calling interceptor")
					}
					return s.MessageService.Message(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageResponse and nil error while calling Message. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) servePost(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePostJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePostProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) servePostJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Post")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessagePostRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Post
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessagePostRequest) (*MessagePostResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostRequest) when calling interceptor")
					}
					return s.MessageService.Post(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessagePostResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagePostResponse and nil error while calling Post. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) servePostProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Post")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessagePostRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Post
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessagePostRequest) (*MessagePostResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostRequest) when calling interceptor")
					}
					return s.MessageService.Post(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessagePostResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagePostResponse and nil error while calling Post. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveEdit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveEditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Edit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageEditRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Edit
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageEditRequest) (*MessageEditResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditRequest) when calling interceptor")
					}
					return s.MessageService.Edit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageEditResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageEditResponse and nil error while calling Edit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveEditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Edit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageEditRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Edit
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageEditRequest) (*MessageEditResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditRequest) when calling interceptor")
					}
					return s.MessageService.Edit(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageEditResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageEditResponse and nil error while calling Edit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDelete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveDeleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageDeleteRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteRequest) when calling interceptor")
					}
					return s.MessageService.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDeleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageDeleteRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteRequest) when calling interceptor")
					}
					return s.MessageService.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) servePostComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePostCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePostCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) servePostCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessagePostCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.PostComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostCommentRequest) when calling interceptor")
					}
					return s.MessageService.PostComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessagePostCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagePostCommentResponse and nil error while calling PostComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) servePostCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessagePostCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.PostComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessagePostCommentRequest) (*MessagePostCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessagePostCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessagePostCommentRequest) when calling interceptor")
					}
					return s.MessageService.PostComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessagePostCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessagePostCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessagePostCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagePostCommentResponse and nil error while calling PostComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveEditComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEditCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEditCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveEditCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EditComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageEditCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.EditComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditCommentRequest) when calling interceptor")
					}
					return s.MessageService.EditComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageEditCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageEditCommentResponse and nil error while calling EditComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveEditCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EditComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageEditCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.EditComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageEditCommentRequest) (*MessageEditCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageEditCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageEditCommentRequest) when calling interceptor")
					}
					return s.MessageService.EditComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageEditCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageEditCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageEditCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageEditCommentResponse and nil error while calling EditComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDeleteComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveDeleteCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageDeleteCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.DeleteComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteCommentRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteCommentRequest) when calling interceptor")
					}
					return s.MessageService.DeleteComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling DeleteComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDeleteCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageDeleteCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.DeleteComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteCommentRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteCommentRequest) when calling interceptor")
					}
					return s.MessageService.DeleteComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling DeleteComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveLikeMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLikeMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLikeMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveLikeMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LikeMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageLikeMessageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.LikeMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeMessageRequest) when calling interceptor")
					}
					return s.MessageService.LikeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageLikeMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageLikeMessageResponse and nil error while calling LikeMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveLikeMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LikeMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageLikeMessageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.LikeMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageLikeMessageRequest) (*MessageLikeMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeMessageRequest) when calling interceptor")
					}
					return s.MessageService.LikeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageLikeMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageLikeMessageResponse and nil error while calling LikeMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveLikeComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLikeCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLikeCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveLikeCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LikeComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageLikeCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.LikeComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeCommentRequest) when calling interceptor")
					}
					return s.MessageService.LikeComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageLikeCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageLikeCommentResponse and nil error while calling LikeComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveLikeCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LikeComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageLikeCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.LikeComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageLikeCommentRequest) (*MessageLikeCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageLikeCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageLikeCommentRequest) when calling interceptor")
					}
					return s.MessageService.LikeComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageLikeCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageLikeCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageLikeCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageLikeCommentResponse and nil error while calling LikeComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageLikes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMessageLikesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMessageLikesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMessageLikesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageLikes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageMessageLikesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageLikes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageLikesRequest) when calling interceptor")
					}
					return s.MessageService.MessageLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageLikesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageLikesResponse and nil error while calling MessageLikes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageLikesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageLikes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageMessageLikesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageLikes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageLikesRequest) (*MessageMessageLikesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageLikesRequest) when calling interceptor")
					}
					return s.MessageService.MessageLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageLikesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageLikesResponse and nil error while calling MessageLikes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveCommentLikes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCommentLikesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCommentLikesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveCommentLikesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CommentLikes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageCommentLikesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.CommentLikes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCommentLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCommentLikesRequest) when calling interceptor")
					}
					return s.MessageService.CommentLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCommentLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCommentLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageCommentLikesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageCommentLikesResponse and nil error while calling CommentLikes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveCommentLikesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CommentLikes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageCommentLikesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.CommentLikes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageCommentLikesRequest) (*MessageCommentLikesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCommentLikesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCommentLikesRequest) when calling interceptor")
					}
					return s.MessageService.CommentLikes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCommentLikesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCommentLikesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageCommentLikesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageCommentLikesResponse and nil error while calling CommentLikes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveSetMessageVisibility(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetMessageVisibilityJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetMessageVisibilityProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveSetMessageVisibilityJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetMessageVisibility")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageSetMessageVisibilityRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.SetMessageVisibility
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageSetMessageVisibilityRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetMessageVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetMessageVisibilityRequest) when calling interceptor")
					}
					return s.MessageService.SetMessageVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetMessageVisibility. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveSetMessageVisibilityProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetMessageVisibility")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageSetMessageVisibilityRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.SetMessageVisibility
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageSetMessageVisibilityRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetMessageVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetMessageVisibilityRequest) when calling interceptor")
					}
					return s.MessageService.SetMessageVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetMessageVisibility. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveSetCommentVisibility(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetCommentVisibilityJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetCommentVisibilityProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveSetCommentVisibilityJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetCommentVisibility")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageSetCommentVisibilityRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.SetCommentVisibility
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageSetCommentVisibilityRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetCommentVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetCommentVisibilityRequest) when calling interceptor")
					}
					return s.MessageService.SetCommentVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetCommentVisibility. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveSetCommentVisibilityProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetCommentVisibility")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageSetCommentVisibilityRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.SetCommentVisibility
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageSetCommentVisibilityRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageSetCommentVisibilityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageSetCommentVisibilityRequest) when calling interceptor")
					}
					return s.MessageService.SetCommentVisibility(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling SetCommentVisibility. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveReportMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveReportMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageReportMessageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.ReportMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageReportMessageRequest) when calling interceptor")
					}
					return s.MessageService.ReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageReportMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageReportMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageReportMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageReportMessageResponse and nil error while calling ReportMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveReportMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageReportMessageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.ReportMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageReportMessageRequest) (*MessageReportMessageResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageReportMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageReportMessageRequest) when calling interceptor")
					}
					return s.MessageService.ReportMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageReportMessageResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageReportMessageResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageReportMessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageReportMessageResponse and nil error while calling ReportMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageReport(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMessageReportJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMessageReportProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMessageReportJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageReport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageMessageReportRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageReport
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageReportRequest) when calling interceptor")
					}
					return s.MessageService.MessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageReportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageReportResponse and nil error while calling MessageReport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageReportProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageReport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageMessageReportRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageReport
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMessageReportRequest) (*MessageMessageReportResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMessageReportRequest) when calling interceptor")
					}
					return s.MessageService.MessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageReportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageReportResponse and nil error while calling MessageReport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageReports(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMessageReportsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMessageReportsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMessageReportsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageReports")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageReports
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *Empty) (*MessageMessageReportsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return s.MessageService.MessageReports(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageReportsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageReportsResponse and nil error while calling MessageReports. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMessageReportsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MessageReports")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.MessageReports
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *Empty) (*MessageMessageReportsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*Empty) when calling interceptor")
					}
					return s.MessageService.MessageReports(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageMessageReportsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageMessageReportsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageMessageReportsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageMessageReportsResponse and nil error while calling MessageReports. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDeleteReportedMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteReportedMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteReportedMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveDeleteReportedMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteReportedMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageDeleteReportedMessageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.DeleteReportedMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteReportedMessageRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteReportedMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteReportedMessageRequest) when calling interceptor")
					}
					return s.MessageService.DeleteReportedMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling DeleteReportedMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveDeleteReportedMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteReportedMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageDeleteReportedMessageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.DeleteReportedMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageDeleteReportedMessageRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageDeleteReportedMessageRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageDeleteReportedMessageRequest) when calling interceptor")
					}
					return s.MessageService.DeleteReportedMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling DeleteReportedMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveBlockReportedUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBlockReportedUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBlockReportedUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveBlockReportedUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BlockReportedUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageBlockReportedUserRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.BlockReportedUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageBlockReportedUserRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageBlockReportedUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageBlockReportedUserRequest) when calling interceptor")
					}
					return s.MessageService.BlockReportedUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling BlockReportedUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveBlockReportedUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BlockReportedUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageBlockReportedUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.BlockReportedUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageBlockReportedUserRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageBlockReportedUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageBlockReportedUserRequest) when calling interceptor")
					}
					return s.MessageService.BlockReportedUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling BlockReportedUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveResolveMessageReport(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResolveMessageReportJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResolveMessageReportProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveResolveMessageReportJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResolveMessageReport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageResolveMessageReportRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.ResolveMessageReport
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageResolveMessageReportRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageResolveMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageResolveMessageReportRequest) when calling interceptor")
					}
					return s.MessageService.ResolveMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling ResolveMessageReport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveResolveMessageReportProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResolveMessageReport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageResolveMessageReportRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.ResolveMessageReport
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageResolveMessageReportRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageResolveMessageReportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageResolveMessageReportRequest) when calling interceptor")
					}
					return s.MessageService.ResolveMessageReport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling ResolveMessageReport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMarkRead(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMarkReadJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMarkReadProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveMarkReadJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MarkRead")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageMarkReadRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.MarkRead
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMarkReadRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMarkReadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMarkReadRequest) when calling interceptor")
					}
					return s.MessageService.MarkRead(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling MarkRead. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveMarkReadProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MarkRead")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageMarkReadRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.MarkRead
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageMarkReadRequest) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageMarkReadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageMarkReadRequest) when calling interceptor")
					}
					return s.MessageService.MarkRead(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling MarkRead. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveCounters(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCountersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCountersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messageServiceServer) serveCountersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Counters")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessageCountersRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.MessageService.Counters
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageCountersRequest) (*MessageCountersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCountersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCountersRequest) when calling interceptor")
					}
					return s.MessageService.Counters(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCountersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCountersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageCountersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageCountersResponse and nil error while calling Counters. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) serveCountersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Counters")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessageCountersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.MessageService.Counters
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MessageCountersRequest) (*MessageCountersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MessageCountersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MessageCountersRequest) when calling interceptor")
					}
					return s.MessageService.Counters(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MessageCountersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MessageCountersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MessageCountersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessageCountersResponse and nil error while calling Counters. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messageServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *messageServiceServer) ProtocGenTwirpVersion() string {
	return "v7.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *messageServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "rpc", "MessageService")
}

var twirpFileDescriptor3 = []byte{
	// 1275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0x62, 0x3b, 0x71, 0x8e, 0xe3, 0xb4, 0x61, 0xdc, 0xd6, 0x91, 0x9b, 0xc6, 0x55, 0x87,
	0x2d, 0x18, 0x36, 0xa7, 0x48, 0x31, 0x60, 0x6d, 0xd7, 0xa1, 0x4b, 0x62, 0x0c, 0xc6, 0x9a, 0x62,
	0xd3, 0xb2, 0x0c, 0xdb, 0x4d, 0xe0, 0x48, 0x6c, 0x22, 0xf8, 0x47, 0x9e, 0x44, 0x07, 0xf3, 0x23,
	0xec, 0x6e, 0xef, 0xb0, 0x87, 0xd8, 0xdd, 0xee, 0x76, 0xbb, 0x67, 0x1a, 0x44, 0x52, 0x14, 0x49,
	0xd1, 0x8a, 0xbd, 0xde, 0xec, 0x2a, 0xd6, 0xf9, 0xf9, 0x78, 0xbe, 0xc3, 0x23, 0xf2, 0x53, 0xa0,
	0x3e, 0xc2, 0x71, 0xdc, 0xbf, 0xc2, 0x9d, 0x49, 0x14, 0x92, 0x10, 0x95, 0xa2, 0x89, 0x67, 0xd7,
	0x46, 0xa1, 0x8f, 0x87, 0xcc, 0xe2, 0xfc, 0x6e, 0xc1, 0xfd, 0x53, 0x16, 0xc3, 0xff, 0xc4, 0x2e,
	0xfe, 0x65, 0x8a, 0x63, 0x82, 0x1a, 0x50, 0x21, 0xe1, 0x00, 0x8f, 0x9b, 0x56, 0xdb, 0xda, 0x5f,
	0x77, 0xd9, 0x03, 0x42, 0x50, 0x7e, 0x17, 0x85, 0xa3, 0xe6, 0x0a, 0x35, 0xd2, 0xdf, 0x49, 0xa4,
	0x17, 0x4e, 0xc7, 0xa4, 0x59, 0x6a, 0x5b, 0xfb, 0x15, 0x97, 0x3d, 0xa0, 0x1d, 0xa8, 0x5e, 0x45,
	0xe1, 0x74, 0x72, 0x11, 0xf8, 0xcd, 0x32, 0x8d, 0x5e, 0xa3, 0xcf, 0x3d, 0x1f, 0xb5, 0x60, 0xfd,
	0x5d, 0x14, 0xe0, 0xb1, 0x9f, 0xf8, 0x2a, 0xd4, 0x57, 0x65, 0x86, 0x9e, 0xef, 0x1c, 0xc3, 0x83,
	0x5c, 0x45, 0xf1, 0x24, 0x1c, 0xc7, 0x18, 0xed, 0x43, 0x95, 0x13, 0x8a, 0x9b, 0x56, 0xbb, 0xb4,
	0x5f, 0x3b, 0xdc, 0xe8, 0x44, 0x13, 0xaf, 0xc3, 0x03, 0x5d, 0xe1, 0x75, 0xde, 0xc0, 0x3d, 0x15,
	0xa4, 0x98, 0xd5, 0x2e, 0x00, 0x4f, 0x4d, 0x2a, 0x62, 0xdc, 0xd6, 0xb9, 0xa5, 0xe7, 0x3b, 0xaf,
	0xf5, 0x26, 0x89, 0x8a, 0x3e, 0x84, 0x35, 0x1e, 0x46, 0x01, 0xf5, 0x82, 0x52, 0xa7, 0xe3, 0x01,
	0xe2, 0xb6, 0x6f, 0xc3, 0x98, 0xdc, 0xda, 0x62, 0x82, 0x7f, 0x25, 0x69, 0x8b, 0x93, 0xdf, 0xe8,
	0x09, 0xd4, 0xfb, 0x84, 0xf4, 0xbd, 0xeb, 0x11, 0x1e, 0x93, 0xa4, 0xc6, 0x12, 0x75, 0x6e, 0x64,
	0xc6, 0x9e, 0xef, 0xbc, 0x82, 0x6d, 0x65, 0x91, 0x25, 0x6b, 0xfc, 0xcb, 0x12, 0x45, 0x76, 0xfd,
	0x40, 0x14, 0xa9, 0xf6, 0xc6, 0xd2, 0x7a, 0x83, 0x1e, 0xc3, 0x46, 0x52, 0xe1, 0x85, 0x77, 0xdd,
	0x1f, 0x5f, 0x61, 0xd6, 0xbc, 0xaa, 0x5b, 0x4b, 0x6c, 0xc7, 0xcc, 0x24, 0x08, 0x95, 0x24, 0x42,
	0x9f, 0x02, 0x92, 0x08, 0xa5, 0xc9, 0x65, 0x9a, 0xbc, 0x95, 0x79, 0x52, 0x88, 0x1c, 0xff, 0x4a,
	0x21, 0x7f, 0x56, 0xff, 0x92, 0xfc, 0x3f, 0x83, 0x06, 0xb7, 0x9d, 0xe0, 0x21, 0x26, 0x78, 0xb1,
	0x06, 0x38, 0xbf, 0x59, 0xb0, 0x23, 0xb5, 0xfd, 0x38, 0x1c, 0x25, 0xe5, 0xbc, 0xcf, 0xbc, 0x19,
	0x1b, 0x96, 0xeb, 0x40, 0xd9, 0xd0, 0x81, 0x13, 0xb0, 0x4d, 0xa5, 0x64, 0x8d, 0xf0, 0x98, 0xc9,
	0xdc, 0x08, 0xee, 0x74, 0xfe, 0xce, 0x18, 0x25, 0x8d, 0xd4, 0x18, 0xed, 0x02, 0xf0, 0x40, 0xa9,
	0x1d, 0xdc, 0xf2, 0xff, 0x9a, 0x87, 0xac, 0x1b, 0x0a, 0x8d, 0x25, 0xbb, 0xf1, 0x05, 0xb4, 0x94,
	0xb1, 0x58, 0xaa, 0x1d, 0x8e, 0x2b, 0x5a, 0xf9, 0x26, 0x18, 0xe8, 0x87, 0xd1, 0x2d, 0xaf, 0xd6,
	0x7d, 0x58, 0x9d, 0x8e, 0x87, 0xc1, 0x00, 0xf3, 0x26, 0xf2, 0x27, 0xe7, 0x50, 0xf0, 0x52, 0x30,
	0x39, 0xaf, 0x06, 0x54, 0x92, 0xa8, 0x98, 0xe2, 0x55, 0x5c, 0xf6, 0xa0, 0xd5, 0xb1, 0xdc, 0x96,
	0x2e, 0x56, 0x87, 0xde, 0x5f, 0x73, 0x1d, 0x2f, 0x45, 0x8e, 0x94, 0x1a, 0x2f, 0xf8, 0xaa, 0x75,
	0xc5, 0x56, 0xa8, 0xc9, 0x62, 0x47, 0xc5, 0x8a, 0xc9, 0xdd, 0x70, 0x57, 0xde, 0xcf, 0x24, 0x32,
	0x5f, 0x03, 0xaf, 0x59, 0xaf, 0xa1, 0x68, 0x43, 0xb3, 0x1a, 0xd4, 0xe4, 0x25, 0x6b, 0xf0, 0xc0,
	0xe1, 0xd6, 0xef, 0x31, 0xe1, 0xbf, 0xce, 0x83, 0x38, 0xb8, 0x0c, 0x86, 0x01, 0x99, 0x2d, 0x38,
	0x20, 0x8f, 0x00, 0x6e, 0x44, 0x0e, 0xdf, 0x1c, 0xc9, 0xa2, 0x2e, 0xc2, 0xcb, 0x35, 0x2e, 0x52,
	0xb4, 0xfb, 0xb7, 0x2d, 0x72, 0x26, 0x1a, 0xe2, 0xe2, 0x49, 0x18, 0x91, 0xa5, 0x67, 0x3c, 0xa2,
	0x69, 0xfc, 0x14, 0xe4, 0x4f, 0xce, 0x4b, 0x78, 0x68, 0x46, 0xe5, 0x7d, 0x6e, 0xc1, 0x3a, 0x8b,
	0xcc, 0x50, 0xab, 0xcc, 0xd0, 0xf3, 0x9d, 0x17, 0xfa, 0x9c, 0x30, 0x8c, 0xb4, 0xa4, 0xc2, 0x5c,
	0x22, 0x16, 0xd6, 0x72, 0xf9, 0xc2, 0x7b, 0x50, 0x63, 0xb1, 0xd8, 0xbf, 0xb8, 0x9c, 0xf1, 0x74,
	0x48, 0x4d, 0x47, 0xb3, 0x79, 0x8c, 0x92, 0x55, 0xfb, 0x53, 0x72, 0x1d, 0x46, 0xd9, 0xf5, 0x5d,
	0x65, 0x86, 0x9e, 0xef, 0x9c, 0xc2, 0xae, 0x69, 0xd5, 0x6c, 0xae, 0x3e, 0x81, 0x35, 0x86, 0x93,
	0x4e, 0x16, 0x52, 0x4e, 0x2b, 0x56, 0x63, 0x1a, 0xe2, 0x1c, 0xc1, 0x13, 0xed, 0x2a, 0x63, 0xe5,
	0x69, 0x7b, 0x53, 0xd8, 0x88, 0x2f, 0x61, 0x8f, 0x87, 0x1f, 0x0d, 0x43, 0x6f, 0x90, 0x42, 0xfc,
	0x10, 0xe3, 0x68, 0xa1, 0xfc, 0xaf, 0xc4, 0xf0, 0xb9, 0x38, 0x0e, 0x87, 0x37, 0xff, 0x61, 0x2f,
	0x9e, 0x67, 0xba, 0xab, 0x1f, 0x0d, 0x5c, 0xdc, 0xf7, 0xd3, 0xb4, 0x3d, 0xa8, 0x65, 0x53, 0xc5,
	0x5a, 0xb2, 0xee, 0x82, 0x18, 0xab, 0xd8, 0xe9, 0x88, 0xd4, 0xe3, 0x44, 0x8d, 0xe2, 0xa8, 0x58,
	0xd7, 0x3a, 0x7f, 0x5a, 0x70, 0x47, 0x4b, 0x48, 0x16, 0x21, 0x21, 0xe9, 0x0f, 0x2f, 0x98, 0xba,
	0x5d, 0xa1, 0xe7, 0x18, 0x50, 0x13, 0x8d, 0x49, 0xee, 0xba, 0xe9, 0x38, 0xc2, 0x7d, 0xff, 0x42,
	0xd6, 0xbf, 0x35, 0x66, 0x63, 0x21, 0x1d, 0xd8, 0x4e, 0x31, 0xd8, 0x2b, 0xc6, 0x22, 0xcb, 0x34,
	0x72, 0x8b, 0x63, 0x51, 0x0f, 0x8b, 0x7f, 0x0a, 0x0d, 0x01, 0x29, 0x27, 0x54, 0x68, 0x02, 0x4a,
	0xa1, 0xb3, 0x0c, 0xe7, 0x8f, 0xb2, 0x10, 0xcc, 0x19, 0xd5, 0x6c, 0x58, 0x65, 0x06, 0xd6, 0xad,
	0x0c, 0x56, 0x16, 0x66, 0x50, 0x5a, 0x96, 0x41, 0x79, 0x1e, 0x03, 0x74, 0x0e, 0x9b, 0xec, 0x4b,
	0xc1, 0xe3, 0xf5, 0x37, 0x2b, 0x74, 0xc4, 0x0f, 0xe4, 0x11, 0xd7, 0xb9, 0x75, 0xbe, 0x4e, 0x52,
	0x52, 0x6b, 0x77, 0x4c, 0xa2, 0x99, 0x5b, 0xbf, 0x92, 0x6d, 0xe8, 0x27, 0xb8, 0xe3, 0x07, 0x11,
	0xf6, 0x48, 0x06, 0xbc, 0x4a, 0x81, 0x9f, 0x16, 0x02, 0x9f, 0xd0, 0x1c, 0x15, 0x79, 0xd3, 0x57,
	0x8c, 0xf6, 0x39, 0xa0, 0xfc, 0xfa, 0xe8, 0x2e, 0x94, 0x06, 0x38, 0x3d, 0x13, 0x92, 0x9f, 0xe8,
	0x63, 0xa8, 0xdc, 0xf4, 0x87, 0x53, 0x76, 0x73, 0xd6, 0x0e, 0x1b, 0xc6, 0x85, 0x59, 0xc8, 0x8b,
	0x95, 0xcf, 0x2d, 0xfb, 0x47, 0xd8, 0x36, 0x2c, 0xff, 0xfe, 0xc0, 0x87, 0xff, 0x6c, 0xc0, 0xa6,
	0xb8, 0x0b, 0xa2, 0x9b, 0xc0, 0xc3, 0xa8, 0x0b, 0xd5, 0xf4, 0x0b, 0x0b, 0xb5, 0xe4, 0x7c, 0xed,
	0x4b, 0xd0, 0x7e, 0x68, 0x76, 0xf2, 0x19, 0x3b, 0x82, 0x35, 0x6e, 0x43, 0xb6, 0x21, 0x30, 0x05,
	0x69, 0x19, 0x7d, 0x1c, 0xe3, 0x39, 0x94, 0x13, 0xc1, 0x8a, 0x1e, 0xc8, 0x41, 0xd2, 0x97, 0x92,
	0xdd, 0xcc, 0x3b, 0xb2, 0xd4, 0x44, 0xdd, 0xa9, 0xa9, 0xd2, 0xf7, 0x8b, 0x9a, 0xaa, 0x7c, 0x18,
	0x1c, 0xc0, 0x2a, 0x3b, 0x1e, 0xd1, 0x8e, 0x1c, 0xa3, 0xa8, 0x7f, 0x1b, 0xa8, 0xab, 0x3b, 0x9a,
	0x90, 0x19, 0x7a, 0x0b, 0x35, 0x49, 0x57, 0xa3, 0x47, 0x7a, 0x51, 0xaa, 0xac, 0xb2, 0xf7, 0xe6,
	0xfa, 0x79, 0x01, 0x6f, 0xa1, 0x26, 0x29, 0x53, 0x15, 0x2f, 0xaf, 0xbc, 0x55, 0x3c, 0x93, 0xa4,
	0x7d, 0x05, 0x75, 0x45, 0xa3, 0xa2, 0x76, 0x9e, 0x97, 0x86, 0xa9, 0xd1, 0x93, 0x04, 0xa5, 0x5a,
	0x4e, 0x5e, 0xbd, 0xaa, 0xe5, 0x98, 0x94, 0x28, 0xc7, 0x33, 0xd2, 0xcb, 0xab, 0xd0, 0x3c, 0x9e,
	0x4e, 0xef, 0x3b, 0xd8, 0x90, 0x75, 0x1f, 0xda, 0x33, 0x8c, 0x94, 0x2c, 0xe5, 0xec, 0xf6, 0xfc,
	0x80, 0x0c, 0x52, 0x96, 0x71, 0x2a, 0xa4, 0x41, 0x1d, 0xaa, 0x90, 0x46, 0x05, 0xf8, 0x0d, 0x34,
	0x4c, 0x92, 0x0e, 0x7d, 0x24, 0x67, 0x16, 0x88, 0x3e, 0x65, 0x4b, 0x18, 0x58, 0x4e, 0xba, 0xe5,
	0xc0, 0xe6, 0x89, 0x3b, 0x05, 0xec, 0x0c, 0xea, 0x8a, 0x98, 0x52, 0xc7, 0xc3, 0xa4, 0xde, 0xec,
	0xc7, 0x05, 0x11, 0x9c, 0xef, 0x19, 0xd4, 0x15, 0x3f, 0x6a, 0x1b, 0xdf, 0x74, 0xe9, 0xd2, 0x57,
	0x51, 0xcd, 0x32, 0xeb, 0xb5, 0x38, 0xae, 0xb8, 0x12, 0x42, 0x12, 0x13, 0xdb, 0x99, 0x0b, 0x90,
	0xed, 0xc3, 0x29, 0xdc, 0x33, 0x8a, 0x1f, 0xb4, 0x6f, 0x7a, 0xd9, 0x4d, 0xfa, 0x48, 0x69, 0x5e,
	0x17, 0xb6, 0x72, 0x3a, 0x08, 0x7d, 0x20, 0x43, 0xcd, 0x93, 0x49, 0xfa, 0x86, 0x9a, 0xe4, 0x90,
	0xba, 0xa1, 0x05, 0x82, 0x49, 0x01, 0x7b, 0x06, 0xd5, 0x54, 0x18, 0x69, 0x27, 0xb8, 0x2a, 0x97,
	0x34, 0x22, 0x55, 0x71, 0x43, 0xb6, 0xcc, 0x17, 0xa1, 0xe1, 0xd8, 0xd7, 0x6f, 0xc9, 0xa3, 0xea,
	0xcf, 0xab, 0x9d, 0xce, 0x41, 0x34, 0xf1, 0x2e, 0x57, 0xe9, 0xbf, 0x12, 0x9f, 0xfd, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x22, 0x5c, 0xa1, 0x94, 0x6d, 0x14, 0x00, 0x00,
}
